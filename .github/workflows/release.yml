name: Release
on:
  push:
    tags:
      - 'v*'

env:
  GHCR_SLUG: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-20.04
    name: Build
    strategy:
      matrix:
        arch: ["amd64", "arm64"]
    env:
      OUTPUT_DIR: ${{ github.workspace }}/release-out
    steps:
    - uses: actions/setup-go@v3
      with:
        go-version: '1.18.x'
    - uses: actions/checkout@v3
    - name: Build Binary
      run: |
        mkdir ${OUTPUT_DIR}
        RELEASE_TAG="${GITHUB_REF##*/}"
        TAR_FILE_NAME="buildg-${RELEASE_TAG}-linux-${{ matrix.arch }}.tar.gz"
        SHA256SUM_FILE_NAME="${TAR_FILE_NAME}.sha256sum"
        PREFIX=$(pwd)/out GOARCH=${{ matrix.arch }} make
        cp ./extras/buildg.sh ./out/
        tar -C ./out/ -zcvf "${OUTPUT_DIR}/${TAR_FILE_NAME}" .
        cat "${OUTPUT_DIR}/${TAR_FILE_NAME}" | tar -zv --list
        ( cd ${OUTPUT_DIR}; sha256sum ${TAR_FILE_NAME} ) > "${OUTPUT_DIR}/${SHA256SUM_FILE_NAME}"
    - name: Save Binary
      uses: actions/upload-artifact@v3
      with:
        name: builds-${{ matrix.arch }}
        path: ${{ env.OUTPUT_DIR }}/*

  release:
    runs-on: ubuntu-20.04
    name: Release
    needs: [build]
    env:
      OUTPUT_DIR: ${{ github.workspace }}/builds
    steps:
    - uses: actions/checkout@v3
    - name: Download Builds
      uses: actions/download-artifact@v3
      with:
        path: ${{ env.OUTPUT_DIR }}
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_TAG="${GITHUB_REF##*/}"
        cat <<EOF > ${GITHUB_WORKSPACE}/release-note.txt
        ${RELEASE_TAG}

        (TBD)
        EOF
        ASSET_FLAGS=()
        ls -al ${OUTPUT_DIR}/
        for A in "amd64" "arm64" ; do
          for F in ${OUTPUT_DIR}/builds-${A}/* ; do
            ASSET_FLAGS+=("-a" "$F")
          done
        done
        hub release create "${ASSET_FLAGS[@]}" -F ${GITHUB_WORKSPACE}/release-note.txt --draft "${RELEASE_TAG}"
  
  containerize:
    runs-on: ubuntu-20.04
    name: Containerize
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.GHCR_SLUG }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=pr
            type=edge
          labels: |
            org.opencontainers.image.title=buildg
            org.opencontainers.image.description=Interactive debugger for Dockerfile, with support for IDEs (VS Code, Emacs, Neovim, etc.)
            org.opencontainers.image.vendor=${{ github.repository_owner }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build image
        uses: docker/bake-action@v2
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: image-all
          pull: true
          push: ${{ github.event_name != 'pull_request' }}